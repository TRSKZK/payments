// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  password      String?
  address       Address[]
  payments      Payment[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Address {
  id              String           @id @default(cuid())
  city            String
  street          String
  building        String
  apartment       String
  utilityServices UtilityService[]
  ownerId         String

  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model UtilityService {
  id                    String    @id @default(cuid())
  name                  String
  iban                  String
  edrpou                String
  personalAccountNumber String
  prevValue             String?
  currentValue          String?
  rate                  String?
  addressId             String
  payment               Payment[]

  address Address @relation(fields: [addressId], references: [id], onDelete: Cascade)

  @@map("utility-services")
}

model Payment {
  id                    String   @id @default(cuid())
  paymentDateTime       DateTime @default(now())
  iban                  String
  edrpou                String
  personalAccountNumber String
  prevValue             String
  currentValue          String
  ownerId               String
  serviceId             String
  payed                 Int

  user    User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  service UtilityService @relation(fields: [serviceId], references: [id])

  @@map("payments")
}
